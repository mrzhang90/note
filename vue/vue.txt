vue.js不是一个框架,它只是一个MVVM风格的双向数据绑定的库，专注于UI层面
vue不支持IE8以下浏览器，因为IE8以下为ES5支持不好，例如IE8以下不支持Object.assign对象拷贝的方法
PS:
	vue会把自定义的大写标签名转成小写，从而引起报错，可以安装decamelize，即可支持大写
		https://www.npmjs.com/package/decamelize
ajax
	 vue-resource
	 	vue 的 ajax 库
	 	一般非单页应用在ready里获取数据就行,如果是单页应用根据路由生命周期来获取,比如
			route: {
			  data: function (transition) {
			    //数据获取,修改data
			    transition.next()
			  }
			}
模板标签：
	{{}}
		{{$data | json}}
		PS:vue + swig时，{{}}这种标记会有代码冲突，建议把swig的标识符改成[[]]
	v-if
	v-show
	v-model
	v-bind:title="message"
		将元素绑定title属性，可简写：
		:title
	v-bind:class
		简写：
		:class
	v-on:submit.prevent="submitMyForm"
		v-on:submit 可以简写成 @submit
		.prevent 相当于脚本里的 ev.preventDefault();
		即：@submit.prevent="submitMyForm"
	@click
		可以把脚本直接写在元素内，@click="num+=1"
	template
		首先自定义组件：
			<praise id="yes" title="赞" pclass="btn btn-primary"></praise>
		然后创建template模板
			<template id="praise-templ">
				<label for="{{id}}">{{ title }}</label>
				<input id="{{ id }}" type="button" class="{{ pclass }}" name="" value="{{ count }}" @click=" uploadNum "/>
			</template>
		最后脚本注册
			Vue.component('praise',{
				props:['id','title','pclass'],//注册
				template:'#praise-templ',
				data:function(){
					return {
						count:0
					}
				},
				methods:{
					uploadNum:function(){
						this.count+=1
					}
				}
			})
directive
	自定义指令
	Vue.directive('focus',{
		//钩子函数
		bind:function(el,binding,vnode,oldVnode){
			//只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置
			//钩子函数参数
				el
					指令所绑定的元素，可以用来直接操作 DOM 。
				binding：一个对象，包含以下属性：
					name
						指令名，不包括 v- 前缀。
					value
						指令的绑定值，例如：v-my-directive="1 + 1" 中，绑定值为 2。
					oldValue
						指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
					expression
						字符串形式的指令表达式。例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。
					arg
						传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 "foo"。
					modifiers
						一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。
				vnode
					Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。
				oldVnode
					上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用
		},
		inserted:function(){
			//被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)
		},
		update:function(){
			//所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)
		},
		componentUpdated:function(){
			//指令所在组件的 VNode 及其子 VNode 全部更新后调用
		},
		unbind:function(){
			//只调用一次，指令与元素解绑时调用
		}
	})
动画
	实现动画的4中方案：
		1.在CSS过渡和动画中自动应用class
		2.可以配合使用第三方CSS动画库，如Animate.css
		3.在过渡钩子函数中使用Javascript直接操作DOM
		4.可以配合使用第三方JavaScript动画哭，如Velocity.js
			{complete: done}
				当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 。否则，它们会被同步调用，过渡会立即完成。
	v-bind:css="false"
		推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css="false"，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。
	自定义过渡类名
		v-enter
			定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。
		v-enter-active
			定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
		v-enter-to:
			2.1.8版及以上
			定义进入过渡的结束状态。在元素被插入一帧后生效 (于此同时 v-enter 被删除)，在 transition/animation 完成之后移除。
		v-leave
			定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。
		v-leave-active
			定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
		v-leave-to
			2.1.8版及以上
			定义离开过渡的结束状态。在离开过渡被触发一帧后生效 (于此同时 v-leave 被删除)，在 transition/animation 完成之后移除
	JavaScript 钩子
		PS:这些钩子函数可以结合 CSS transitions/animations 使用，也可以单独使用
		methods: {
		  // 进入中
		  beforeEnter: function (el) {
		  },
		  // 此回调函数是可选项的设置
		  // 与 CSS 结合时使用
		  enter: function (el, done) {
		    // ...
		    done()//回调函数 done 是必须的 。否则，它们会被同步调用，过渡会立即完成
		  },
		  afterEnter: function (el) {
		  },
		  enterCancelled: function (el) {
		  },
		  // 离开时
		  beforeLeave: function (el) {
		  },
		  // 此回调函数是可选项的设置
		  // 与 CSS 结合时使用
		  leave: function (el, done) {
		    // ...
		    done()
		  },
		  afterLeave: function (el) {
		  },
		  // leaveCancelled 只用于 v-show 中
		  leaveCancelled: function (el) {
		  }
		}
created和ready都是 vue 组件的生命周期
created
	类型： Function
	详细：
		在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。但是还没有开始 DOM 编译，$el 还不存在。
ready
	类型： Function
	详细：
		在编译结束和 $el 第一次插入文档之后调用，如在第一次 attached 钩子之后调用。注意必须是由 Vue 插入（如 vm.$appendTo() 等方法或指令更新）才触发 ready 钩子。
method
	用来定义方法的,比如你@click="test",methods就定义test这个方法
remove
	this.items.$remove(task)
filter
	this.items.filter(function(task){
		return !task.complted;
	})
计算：
	方式1.
		元素内参与计算
		{{ score>99 ? "好学生" : "普通学生"}}
	方式二.
		computed方法
			是计算属性
		调用方式
			{{ userName }}
		计算脚本
			computed:{
				userName:function(){
					return "全名为：【"+ this.firstName + this.lastName+"】"
				}
			}
vue：
	new Vue({
		el:'#app',
		data:{
			message:'Hello world'
		},
		methods:{
			submitMyForm:function(ev){
				ev.preventDefault();
				alert('submit')
			}
		}
	})