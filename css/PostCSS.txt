PostCSS较Sass和Less的优势
	1.大平台在用，插件形式的使用，扩展方便
	2.支持与js通信
	3.未来-高浏览器直接可以支持其语法，也就是说未来摒弃postcss，代码直接跑在浏览器
	4.自动前缀-压缩-等利用插件扩展

CSS预处理器
	就是把浏览器不认识的文件(.sass，.less等)转换成.css文件
Sass
	比较重-团队可以做一个自己的类似bootstrap
less
	较轻-团队用的较多
stylus
预处理常用规范
	变量
	混合(Mixin) Extend
		支持把一段css混合到另一端css里
	嵌套规则
	运算
	函数
	Namespaces & Accessors
	Scope
	注释
CSS后处理器
	CSS压缩 CLEAN-CSS
	自动添加浏览器前缀 Autoprefixer
	CSS更加美观 CSScomb
	Rework取代Stylus 后处理器发热
	前后通吃 PostCSS
		非常轻量，通过插件来完成。
		把文件通过常见转成抽象语法树，然后吐出去
PostCSS
	值得收藏的插件
		POSTCSS-CUSTOM-PROPERTIES 运行时变量
		POSTCSS-SIMPLE-VARS 与SCSS一直的变量实现
		POSTCSS-MIXINS 实现类似SASS的@MIXIN的功能
		POSTCSS-EXTEND 实现类似SASS的继承功能
		POSTCSS-IMPORT 实现类似SASS的IMPORT
		CSSNext-面向未来 CSS Grace-修复过去

	cssnext语法
		语法有一个特性是，会删除w3c废弃的语法
		CSS变量
			.mouse-x:0.1
		使用css变量
			var(--mouse-x)
		calc结合css变量计算
			left:cala(1000px * var(--mouse-x))
		var使用css变量，定义默认值
			var(--mouse-x,0.1)
		定义--center代码块
			:root {
			  --centered: {
			  };
			}
		使用--center代码块
			@apply --center
		定义 自定义的标签
			@custom-selector :--heading h1, h2, h3, h4, h5, h6;
		color函数计算颜色
			color: color(var(--highlightColor) blackness(+20%))
		使用自定义标签
			:--heading { margin-top: 0 }
		system-ui命令--生成系统支持的字体
			font-family: system-ui;
		image-set根绝分辨率和网速决定使用1倍图或2倍图
			这种方式比css3的image-set兼容更好，支持大多数移动端和webkit浏览器
		    background-image:
		      image-set(
		        url(img/test.png) 1x,
		        url(img/test-2x.png) 2x
		      );
		语法中，用@声明的都是重要特性		
			@xxx
	javascript给CSS变量赋值
		var root = documentg.documentElement;
		document.addEventListener("mousemove",evt=>{
			let x=evt.clientX/innerWidth;

			root.style.setProperty("--mouse-x",x);//这里的--mouse-x使用css变量
		})