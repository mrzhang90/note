vue1.0时因为全部依赖DOM DIFF导致大量内存泄露
	2.0时很聪明的做了判断，可以直接吐的元素就直接吐出来，不走DOM DIFF
vue.js不是一个框架,它只是一个MVVM风格的双向数据绑定的库，专注于UI层面
vue不支持IE9以下浏览器，因为IE8以下为ES5支持不好，例如IE8以下不支持Object.assign对象拷贝的方法
PS:
	vue会把自定义的大写标签名转成小写，从而引起报错，可以安装decamelize，即可支持大写
		https://www.npmjs.com/package/decamelize
vue核心库只关心view视图

## 模板标签：
	Vue.js 提供了完全的 JavaScript 表达式支持
		{{$data | json}}
		{{ message.split('').reverse().join('') }}
		<div v-bind:id="'list-' + id"></div>
## 指令
	指令带有前缀 v-
	v-model
		可以实现表单输入和应用状态之间的双向绑定
	v-bind
		用于响应式地更新 HTML 属性
		v-bind:title="message"
			将元素绑定title属性，可简写：
			:title
		v-bind:class
			简写：
			:class
	v-on
		用于监听 DOM 事件
		v-on:submit.prevent="submitMyForm"
			v-on:submit 可以简写成 @submit
			.prevent 相当于脚本里的 ev.preventDefault();
			即：@submit.prevent="submitMyForm"
		@click
			可以把脚本直接写在元素内，@click="num+=1"
		keyup的按键别名
			.enter
			.tab
			.delete (捕获“删除”和“退格”键)
			.esc
			.space
			.up
			.down
			.left
			.right
			<input @keyup.enter="submit">
		系统修饰键
			.ctrl
			.alt
			.shift
			.meta
			<input @keyup.ctrl.67="cpoy" value="ctrl+c">
		事件修饰符
			.stop - 调用 event.stopPropagation()。
			.prevent - 调用 event.preventDefault()。
			.capture - 添加事件侦听器时使用 capture 模式。
			.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。
			.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。
			.native - 监听组件根元素的原生事件。
			.once - 只触发一次回调。
			.left - (2.2.0) 只当点击鼠标左键时触发。
			.right - (2.2.0) 只当点击鼠标右键时触发。
			.middle - (2.2.0) 只当点击鼠标中键时触发。
			.passive - (2.3.0) 以 { passive: true } 模式添加侦听器
				<button @click.stop.prevent="doThis">串联修饰符</button>
				<button v-on="{ mousedown: doThis, mouseup: doThat }">对象语法 (2.4.0+)</button>
		PS:
			修饰符顺序很重要,用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击
	v-for
		in:
			v-for="(value, key, index) in items"
		of:
			v-for="item of items"
		key:

		PS:
			在遍历对象时，是按 Object.keys() 的结果遍历
	v-key
	v-if
		v-else-if
			v-else
		key管理可复用的元素
			例如:
				<template v-if="a=a">
				  <input key="username-input">//添加key避免input切换时别复用
				</template>
				<template v-else>
				  <input key="email-input">
				</template>
	v-show
		不支持 <template> 元素，也不支持 v-else
	v-once
		插值处的{{内容不会更新}}
	v-html
		输出真正的 HTML
## emit触发事件
	$emit(eventName, optionalPayload)
		触发事件
## refs
	注册过的组件
	this.$refs.input.value
## $event.target.value
	传递元素的值
	<input\
        ref="input"\
        v-bind:value="value"\
        v-on:input="updateValue($event.target.value)"\
      >
## $前缀
	Vue 实例暴露了一些有用的实例属性与方法
	var data = { a: 1 }
	var vm = new Vue({
	  data: data
	})

	vm.$data === data // => true
	vm.$el === document.getElementById('example') // => true

	// $watch 是一个实例方法
	vm.$watch('a', function (newValue, oldValue) {
	  // 这个回调将在 `vm.a` 改变后调用
	})
## Component
	组件作用域：
		父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。
		例如：
			message应该绑定到父组件上
			<child-component>
			  {{ message }}
			</child-component>
	组件命名约定
		当注册组件 (或者 prop) 时，可以使用 kebab-case (短横线分隔命名)、camelCase (驼峰式命名) 或 PascalCase (单词首字母大写命名)
	vue会把组件名转成小写，所以建议连词写法。例:praise-button
		如果非要用驼峰praiseButton，那么可以使用库"decamelize"
	template
		1.写在组件内
		2.写在html内，不会被html解析
	props
		就像 data 一样，prop 也可以在模板中使用
		父组件的数据需要通过 prop 才能下发到子组件中
		绑定对象
			todo: {
			  text: 'Learn Vue',
			  isComplete: false
			}
			<todo-item v-bind="todo"></todo-item>
			等价于
				<todo-item
				  v-bind:text="todo.text"
				  v-bind:is-complete="todo.isComplete"
				></todo-item>
	data: function () {
	    return {
	      counter: 0
	    }
  	}
## directive
	自定义指令
	Vue.directive('focus',{
		//钩子函数
		bind:function(el,binding,vnode,oldVnode){
			//只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置
			//钩子函数参数
				el
					指令所绑定的元素，可以用来直接操作 DOM 。
				binding：一个对象，包含以下属性：
					name
						指令名，不包括 v- 前缀。
					value
						指令的绑定值，例如：v-my-directive="1 + 1" 中，绑定值为 2。
					oldValue
						指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
					expression
						字符串形式的指令表达式。例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。
					arg
						传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 "foo"。
					modifiers
						一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。
				vnode
					Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。
				oldVnode
					上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用
		},
		inserted:function(){
			//被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)
		},
		update:function(){
			//所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)
		},
		componentUpdated:function(){
			//指令所在组件的 VNode 及其子 VNode 全部更新后调用
		},
		unbind:function(){
			//只调用一次，指令与元素解绑时调用
		}
	})
## 动画
	实现动画的4中方案：
		1.在CSS过渡和动画中自动应用class
		2.可以配合使用第三方CSS动画库，如Animate.css
		3.在过渡钩子函数中使用Javascript直接操作DOM
		4.可以配合使用第三方JavaScript动画哭，如Velocity.js
			{complete: done}
				当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 。否则，它们会被同步调用，过渡会立即完成。
	v-bind:css="false"
		推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css="false"，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。
	自定义过渡类名
		v-enter
			定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。
		v-enter-active
			定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
		v-enter-to:
			2.1.8版及以上
			定义进入过渡的结束状态。在元素被插入一帧后生效 (于此同时 v-enter 被删除)，在 transition/animation 完成之后移除。
		v-leave
			定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。
		v-leave-active
			定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
		v-leave-to
			2.1.8版及以上
			定义离开过渡的结束状态。在离开过渡被触发一帧后生效 (于此同时 v-leave 被删除)，在 transition/animation 完成之后移除
	JavaScript 钩子
		PS:这些钩子函数可以结合 CSS transitions/animations 使用，也可以单独使用
		methods: {
		  // 进入中
		  beforeEnter: function (el) {
		  },
		  // 此回调函数是可选项的设置
		  // 与 CSS 结合时使用
		  enter: function (el, done) {
		    // ...
		    done()//回调函数 done 是必须的 。否则，它们会被同步调用，过渡会立即完成
		  },
		  afterEnter: function (el) {
		  },
		  enterCancelled: function (el) {
		  },
		  // 离开时
		  beforeLeave: function (el) {
		  },
		  // 此回调函数是可选项的设置
		  // 与 CSS 结合时使用
		  leave: function (el, done) {
		    // ...
		    done()
		  },
		  afterLeave: function (el) {
		  },
		  // leaveCancelled 只用于 v-show 中
		  leaveCancelled: function (el) {
		  }
		}
## computed计算属性
	<div id="demo">
		<input type="text" v-model="firstName"/>
		<input type="text" v-model="lastName"/>
		{{ fullName }}
	</div>
	computed: {
	    fullName: function () {
	      return this.firstName + ' ' + this.lastName
	    }
	  }
## 生命周期
	vue实例被创建时要经过一系列的初始化过程，例如：设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等
	beforeCreate
		实例初始化
	created
		在实例创建之后执行
		这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。但是还没有开始 DOM 编译，$el 还不存在。
	！！ready
		在编译结束和 $el 第一次插入文档之后调用，如在第一次 attached 钩子之后调用。注意必须是由 Vue 插入（如 vm.$appendTo() 等方法或指令更新）才触发 ready 钩子。
	beforeMount
		DOM元素加载
	mounted
	beforeUpdate
	updated
	beforeDestroy
	destroyed
	PS:
		生命周期钩子的 this 上下文指向调用它的 Vue 实例
		不要在选项属性或回调上使用箭头函数
		beforecreate
			举个栗子：可以在这加个loading事件 
		created
			在这结束loading，还做一些初始化，实现函数自执行 
		mounted
			在这发起后端请求，拿回数据，配合路由钩子做一些事情
		beforeDestory
			你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容
method
	用来定义方法的,比如你@click="test",methods就定义test这个方法
remove
	this.items.$remove(task)
filter
	this.items.filter(function(task){
		return !task.complted;
	})
## vue提交表单
	new Vue({
		el:'#app',
		data:{
			message:'Hello world'
		},
		methods:{
			submitMyForm:function(ev){
				ev.preventDefault();
				alert('submit')
			}
		}
	})
## ajax
	 vue-resource
	 	vue 的 ajax 库
	 	一般非单页应用在ready里获取数据就行,如果是单页应用根据路由生命周期来获取,比如
			route: {
			  data: function (transition) {
			    //数据获取,修改data
			    transition.next()
			  }
			}