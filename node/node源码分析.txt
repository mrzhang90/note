lib
	internal-文件夹
		不会暴露给外部用户，用于内部调用
		bootstrap_node.js
			特殊文件，定义Node启动会做哪些事情
	_http_client.js
		客户端怎么发请求的
	_http_agent.js
		基于客户端提供代理功能
	_http_common.js
		提供公用模块-状态码、全局变量等
	_http_incoming.js
		和
		_http_outgoing.js是对应的
		相当于request和response，接受和返回
	_http_server.js
		把接受和相应串起来，再组装、解析等功能，在暴露出来启动http_server接口
	stream是node中很重要的模块，跟数据流相关的都是stream
	_stream_wrap.js
		是一个基类，下边流的方法都是通过他来实现的
	_stream_readable.js
	_stream_writable.js
		两个最基本的stream,读取和写入流信息
	_stream_duplex.js
		即可以读，也可以写,比较抽象的类型，具体实现在下边
	_stream_passthrough.js
		对于数据流的加密，通过读取数据流，加密数据流，再写入同一个流里面，这个时候就实现了可读可写
	assert.js
		纯粹的接口实现
	buffer.js
		定义也在c++,这里做一个简单的接口暴露
	child_process.js
		创建子进程相关的接口，暴露在这里
	constants.js
		定义全局变量
	dgram.js
		定义UDP相关接口
	module.js
		node没有直接使用es6的模块系统，而是自己定义的。例如require、imports相关的模块接口
	net.js
		定义TCP相关的
	os.js
		涉及操作系统相关的
	process.js
		特殊的，他本身是一个stream，他是全局变量，bootstrap_nodejs中定义的，这里只是做一些转发暴露
	punycode.js
		这个不用看，之前维护者为了做些渲染，所以从外面引入的一个库，没有CMD标准，完全是浏览器方式
	querystring.js
		暴露path、formate方法
	readline.js
		一行一行的读，拿到信息，做简单的处理
	repl.js-node命令
		输入node命令，不会结束，可以继续输入，再输入内容可以得到一个结果，这个结果就是repl决定的
	string_decoder.js
		他是被http-url require的
	sys.js
		暴露操作系统信息
	timers.js
		nextTick之类的计时器定义在这里，他跟浏览器计时器不一样，是通过libuv实现的
	tls.js
		https和http的关系是
			https比http多require一个tls
	url.js
		跟queryString类似，暴露path、formate方法
	v8.js
		v8运行时的信息，暴露运行时的内存对象之类的
	vm.js
		运行子进程时，先require(vm.js),他是一个沙箱，从而保证运行时的安全性
	zlib.js
		跟解压有关的定义
src
	c++语法，实现接口方法	