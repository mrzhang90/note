mobx
	是在redux的替代品

React只是DOM的一个抽象层，并不是Web应用的完整解决方案。它有两个方面没有涉及：
	1.代码结构
	2.组件之间的通信
所以
	只用React没有写大型应用
因此
	Redux将Flux与函数式编程结合一起，成了最热门的前端架构
总之
	Redux 只是 Web 架构的一种解决方案，也可以选择其他方案

什么时候需要Redux
	"如果你不知道是否需要 Redux，那就是不需要它。"
	"只有遇到 React 实在解决不了的问题，你才需要 Redux 。"
不需要使用 Redux：
	用户的使用方式非常简单
	用户之间没有协作
	不需要与服务器大量交互，也没有使用 WebSocket
	视图层（View）只从单一来源获取数据
	如果你的应用没那么复杂，就没必要用它
Redux 的适用场景(多交互、多数据源)
	用户的使用方式复杂
	不同身份的用户有不同的使用方式（比如普通用户和管理员）
	多个用户之间可以协作
	与服务器大量交互，或者使用了WebSocket
	View要从多个来源获取数据
从组件角度看，如果你的应用有以下场景，可以考虑使用 Redux
	某个组件的状态，需要共享
	某个状态需要在任何地方都可以拿到
	一个组件需要改变全局状态
	一个组件需要改变另一个组件的状态
Redux 的设计思想很简单
	1.Web 应用是一个状态机，视图与状态是一一对应的。
	2.所有的状态，保存在一个对象里面。
Store
	保存数据的地方，可以把它看成一个容器，整个应用只能有一个Store
State
	Store对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。
	Redux 规定:
		一个 State 对应一个 View。只要 State 相同，View 就相同。你知道 State，就知道 View 是什么样，反之亦然
Action
	用户通过View，改变State
		Action 就是 View 发出的通知，表示 State 应该要发生变化了
	Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store
Action Creator
	View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator
	例：
		const ADD_TODO = '添加 TODO';
		function addTodo(text) {
		  return {
		    type: ADD_TODO,
		    text
		  }
		}
		const action = addTodo('Learn Redux');
##	Reducer
	Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer
	Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State
		const reducer = function (state, action) {
		  // ...
		  return new_state;
		};
	实际应用中，Reducer 函数不用手动调用，store.dispatch方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法
		import { createStore } from 'redux';
		const store = createStore(reducer);
		//createStore接受Reducer作为参数，生成一个新的store。以后每当store.dispatch发送过来一个新的Action，就会自动调用Reducer,得到新的state
	为什么这个函数叫做 Reducer 呢？
		因为它可以作为数组的reduce方法的参数。
		例如：
			//一系列 Action 对象按照顺序作为一个数组
			const actions = [
			  { type: 'ADD', payload: 0 },
			  { type: 'ADD', payload: 1 },
			  { type: 'ADD', payload: 2 }
			];
			const total = actions.reduce(reducer, 0); // 3

## 纯函数
	Reducer 函数最重要的特征是，它是一个纯函数
	也就是说，只要是同样的输入，必定得到同样的输出
	纯函数是函数式编程的概念，必须遵守以下一些约束
		1.不得改写参数
		2.不能调用系统 I/O 的API
		3.不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果

	由于 Reducer 是纯函数，就可以保证同样的State，必定得到同样的 View
		但也正因为这一点，Reducer 函数里面不能改变 State，必须返回一个全新的对象，请参考下面的写法
		// State 是一个对象
		function reducer(state, action) {
		  return Object.assign({}, state, { thingToChange });
		  // 或者
		  return { ...state, ...newState };
		}

		// State 是一个数组
		function reducer(state, action) {
		  return [...state, newItem];
		}
		最好把 State 对象设成只读。你没法改变它，要得到新的 State，唯一办法就是生成一个新对象。
			这样的好处是，任何时候，与某个 View 对应的 State 总是一个不变的对象
## 方法
	createStore(reducer || fn)
		createStore方法还可以接受第二个参数，表示 State 的最初状态。这通常是服务器给出的
			let store = createStore(reducer, window.STATE_FROM_SERVER)
			//window.STATE_FROM_SERVER就是整个应用的状态初始值。注意，如果提供了这个参数，它会覆盖 Reducer 函数的默认初始值。
		例：
			import { createStore } from 'redux';  //Redux 提供createStore这个函数，用来生成 Store
			const store = createStore(fn);        //createStore函数接受另一个函数作为参数，返回新生成的 Store 对象
	combineReducers()
		combineReducers()做的就是产生一个整体的 Reducer 函数。该函数根据 State 的 key 去执行相应的子 Reducer，并将返回结果合并成一个大的 State 对象
		例：
			import { combineReducers } from 'redux';
			const chatReducer = combineReducers({
			  chatLog,
			  statusMessage,
			  userName
			})
	store.getState()
		import { createStore } from 'redux';
		const store = createStore(fn);
		const state = store.getState();          //通过store.getState()拿到State
	store.dispatch(action)
		是 View 发出 Action 的唯一方法
		例：
			import { createStore } from 'redux';
			const store = createStore(fn);		
			store.dispatch({                     //store.dispatch接受一个 Action 对象作为参数，将它发送出去
			  type: 'ADD_TODO',
			  payload: 'Learn Redux'
			});
	store.subscribe()
		Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数
		import { createStore } from 'redux';
		const store = createStore(reducer);
		store.subscribe(listener);
			//显然，只要把 View 的更新函数（对于 React 项目，就是组件的render方法或setState方法）放入listen，就会实现 View 的自动渲染
		解除监听：
			store.subscribe方法返回一个函数，调用这个函数就可以解除监听
			let unsubscribe = store.subscribe(() =>
			  console.log(store.getState())
			);
			unsubscribe();
## Store 的实现
	import { createStore } from 'redux';
	let { subscribe, dispatch, getState } = createStore(reducer);
## Reducer 的拆分
	Redux 提供了一个combineReducers方法，用于 Reducer 的拆分。你只要定义各个子 Reducer 函数，然后用这个方法，将它们合成一个大的 Reducer
	例：
		import { combineReducers } from 'redux';
		const chatReducer = combineReducers({
		  chatLog,
		  statusMessage,
		  userName
		})
		export default todoApp;
		//上面的代码通过combineReducers方法将三个子 Reducer 合并成一个大的函数
## 这种写法有一个前提，就是 State 的属性名必须与子 Reducer 同名。如果不同名，就要采用下面的写法
	const reducer = combineReducers({
	  a: doSomethingWithA,
	  b: processB,
	  c: c
	})

	// 等同于
	function reducer(state = {}, action) {
	  return {
	    a: doSomethingWithA(state.a, action),
	    b: processB(state.b, action),
	    c: c(state.c, action)
	  }
	}
## combineReducer(拆分)的简单实现
	const combineReducers = reducers => {
	  return (state = {}, action) => {
	    return Object.keys(reducers).reduce(
	      (nextState, key) => {
	        nextState[key] = reducers[key](state[key], action);
	        return nextState;
	      },
	      {} 
	    );
	  };
	};
## 也可以把所有子 Reducer 放在一个文件里面，然后统一引入
	import { combineReducers } from 'redux'
	import * as reducers from './reducers'
	const reducer = combineReducers(reducers)
## 下面是createStore方法的一个简单实现，可以了解一下 Store 是怎么生成的
	const createStore = (reducer) => {
	  let state;
	  let listeners = [];

	  const getState = () => state;

	  const dispatch = (action) => {
	    state = reducer(state, action);
	    listeners.forEach(listener => listener());
	  };

	  const subscribe = (listener) => {
	    listeners.push(listener);
	    return () => {
	      listeners = listeners.filter(l => l !== listener);
	    }
	  };

	  dispatch({});

	  return { getState, dispatch, subscribe };
	};
## Reducer 函数负责生成 State。由于整个应用只有一个 State 对象，包含所有数据，对于大型应用来说，这个 State 必然十分庞大，导致 Reducer 函数也十分庞大
	const chatReducer = (state = defaultState, action = {}) => {
		const { type, payload } = action;
		switch (type) {
			case ADD_CHAT:
			  return Object.assign({}, state, {
			    chatLog: state.chatLog.concat(payload)
			  });
			case CHANGE_STATUS:
			  return Object.assign({}, state, {
			    statusMessage: payload
			  });
			case CHANGE_USERNAME:
			  return Object.assign({}, state, {
			    userName: payload
			  });
			default: return state;
		}
	};
	上面代码中，三种 Action 分别改变 State 的三个属性。
		ADD_CHAT：chatLog属性
		CHANGE_STATUS：statusMessage属性
		CHANGE_USERNAME：userName属性
## Redux 的工作流程
	首先，用户发出 Action。
		store.dispatch(action);
	然后，Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action。 Reducer 会返回新的 State 。
		let nextState = todoApp(previousState, action);
	State 一旦有变化，Store 就会调用监听函数。
		// 设置监听函数
		store.subscribe(listener);
	listener可以通过store.getState()得到当前状态。如果使用的是 React，这时可以触发重新渲染 View。
		function listerner() {
		  let newState = store.getState();
		  component.setState(newState);   
		}

## redux的构建流程
	1.创建页面容器 id 引入一个初始化文件
	2.初始化的文件把store和左侧的容器分开 利用provider把store灌入到组件里去
	3.通过引入创建store文件 需要reducer 负责修改store
	4.需要插件 middleware 同步的 方便内部的代码不用异步脚步写
	5.store 包含了reducer middleware state
	6.state ->reducer -> store.dispatch(action)
	7.链接起来 Redux.createStore(reducer,state,middleware);
	8.APP合成组件 view action -> reducer ReactRedux.Provider链接一下我们App和store
	9.view 真实的组件 组件一定要注意的  去除state Redux props来
	10.生成常量的配置文件 给全局使用 action reducer
	11.action具体的操作  同步的action 异步的action action=>state 异步action+api=>state
	12.具体的开发action view真实的动作 return {type:xxx} dispatch({type:lights.CHANGE_YELLOW,text:123});
	13.action reducer? state->props->view? action->dispatch?
	14.导出真实的组件之前 通过@ Redux.bindActionCreators(actions名字 ， dispatch);
	15.ReactRedux.connect(state->props->view,action->dispatch); 修改state
	16.reducer Redux.combineReducers 合并很多个reducer
	17.!!!!!reducer action!!!! 初始化的时候 action reducer
