this特性-谁调它就指谁，闭包略微有些差异，就是指向window
闭包就是拿到属于本不该属于他的东西
闭包容易造成内存泄露，因为执行闭包的函数后，浏览器不知道什么时候要用到闭包内部的函数，所以函数会保留在内存
js是函数级多用域，在内部的变量内部都能访问，外部不能访问内部的，内部能访问外部的
var 变量提升

按址引用
按值引用

闭包：
	作用：可以保护内部的变量
	闭包可能会造成内存泄露，可以在使用后赋值null解决

原型链：
	构造函数里的属性的优先级比原型链的要高
	面向对象编程的时候，JS没有类的概念，可以用函数替代
	constructor实际就是对应的那个函数
	prototype按引用传递的Object.create原型链的副本
	数值 字符串 布尔 都是按值传地址，数值、对象都是按引用传递
	改变this的方法，call apply bind
	函数提升优先级 比 变量提升 更高
	jquery 内部有很多经典的写法，模块化编程的概念，闭包
	同步队列先执行，然后执行异步队列-异步有三种：setTimeout、事件操作、ajax

原型对象
	在js中，每定义一个对象(函数)时，对象中都会包含一些预定义的属性。其中函数对象的一个属性就是原型对象的prototype。普通对象没有prototype，但有__proto__属性
	
bind
	bind是返回一个新的函数 不会改变原来的函数
改变this指向
	call、apply、bind、箭头函数
	构造函数的属性 优先级要大于 原型链的属性
		function test(){
			this.a=1;
		}
		test.prototype.a=2;
异步队列
	事件监听、settTimeout、ajax
同步队列
	for循环

break和coninute的区别:他们一般在for while循环中使用,break-退出循环,coninute-跳过循环
toString:每一种数据类型都有自身的toString,当去使用alert的时候，系统默认会调用这个数据类型的toString；默认将输出的内容传成字符串类型。
toString(16):可讲码点的进值转为16进值
innerHTML:读写某个元素从开始标签到结束标签的所有内容。写操作：会覆盖之前的内容。可以加标签（直接写标签对即可）
***如果拿a标签当按钮的时候在href中写上javascript:; | 当读取a或a的href属性的时候，输出的结果都是href值。
在判断的时候，不要用背景色去判断，因为每个浏览器解析背景色是不一样的。建议用class来做判断。
如果img的src是1.png就换成2.png;;目前来说，不能直接用src来做判断。
+号：如果左右两边为字符串，那么为字符串连接;如果左右两边为数字，那么会做加法运算。
数组中有个属性叫length,length既可以读也可以写。从数组中找某位的值，用下标。下标值是从0开始计算的。

unll 和 undefined
    undefined和null在if语句中，都会被转为false
    undefined == null //true undefined是从null派生出来的，所以他俩相等
    下面两种方法可以区分null和undefiend
        undefined === null //false
        typeof undefined == typeof null //false
    typeof undefined == "undefined" //false
    typeof null == "object"
    Number(undefined) //NaN
    Number(null) == 0
    null表示没有对象，典型用法：
        （1） 作为函数的参数，表示该函数的参数不是对象。
        （2） 作为对象原型链的终点。
        Object.getPrototypeOf(Object.prototype) //null
        document.getElementById('div1') //null 因为我们尝试请求一个不存在的对象
    undefiend表示缺少值，即变量存在但没有定义
        （1）变量被声明了，但没有赋值时，就等于undefined。
        （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。
        （3）对象没有赋值的属性，该属性的值为undefined。
        （4）函数没有返回值时，默认返回undefined。
        var i; //undefined
        function f(x){console.log(x)} //undefined
        var o = new Object(); o.p//undefined
        var x = f(); x//undefined
        
JS预解析机制:
    1.var关键字预解析,js在读到一个 script 之后，会先查找整个 script 内容，找到 所有到 var关键字;把所有的 var声明的 名字 提到整个script的前边;
    2.function关键字解析,js在读到一个 script 之后，会先查找整个 script 内容，找到 所有到 function关键字把所有的 function声明的 名字和内容提到整个script的前边;
    3.预解析之后，js 会一行一行的向下读，碰到等号 才赋值
    全局变量: 在全局范围内，都可以进行使用和修改 （全局作用域）
    1.声明在 函数外边的变量
    2.变量如果不加var声明 就会变成全局变量
    3.写在window属性里
    闭包:函数表达式-函数自执行
    (function (a){
    	console.log(a);
    })(2);
    ~function(a){
    	console.log(a);
    }(3);
    -function(a){
    	console.log(a);
    }(4);
    +function(a){
    	console.log(a);
    }(6);
    !function(a){
    	console.log(a);
    }(5);

心得：
    动态元素:
    appendChild是动态控制元素,把ul的节点追加到ul内,相当于替换,那么因为每次改变指针,所以位置发生改变如下:
    for(var i= 0,len=li.length;i<len;i++){
        ul.appendChild(li[i]);
    }
    运算前:
    <ul>
        <li>1</li>
        <li>2</li>
        <li>3</li>
        <li>4</li>
    </ul>
    运算后:
    <ul>
        <li>2</li>
        <li>4</li>
        <li>3</li>
        <li>1</li>
    </ul>


    1.数组
        parseInt:如果数组只有一个值,那么从左往右看,如果是一个数字,就转成数字
        Number:如果只要一个数字,那么会转成数字,如果两个数字以上,那么就是NaN

    2.隐士类型转换
        1.调取的是Number类型转换
        2.x=+x //这是另一种隐士的将x转为数字的方式
    200200200
    3.多条件比较
        &&:true-会一直执行,直到最后;false-停到flase,输出当前条件的结果;
        ||:true-停到flase,并输出到当前结果;false-会一直执行,直到为true的结果;

    4.nodeType属性值分别为1,2,3
        1:元素节点 2:属性节点 3:文本节点

    5.折纸3D的Z点角度计算方式 = (width/2) / tan(360/length/2)

    6.这是js运动脚本
    http://www.cnblogs.com/bluedream2009/archive/2010/06/19/1760909.html

    7.日期
        new Date().getTime()-返回是一个从现在时间-1970年,得到的结果的毫秒数,也可以理解为返回一个当前时间的毫秒数

    8.get和post的区别:
        1.GET请求是url带参数的方式传递,post请求是作为HTTP消息的实体内容传递给服务器;
        2.GET对数据大小有限制,通常2k左右;post理论上不受限制
        3.GET请求会被浏览器缓存,可以用历史记录找到,所以可能存在严重安全问题;post可以避免这个问题
        4.GET和POST传递到服务器端的获取方式也不相同

    概念:
    javascript的组成：
    ECMAScript(标准) : javascript组成语言的语法和基本对象
    DOM : 文档对象模型  描述处理网页内容的方法和接口
    BOM : 浏览器对象模型 描述与浏览器进行交互的方法和接口
    事件(Event)的特点是，如果你错过了它，再去监听，是得不到结果的

    js的组成：
        ECMAScript(5.1)：javaScript组成言的语法和基本对象; DOM：文档对象模型，描述处理网页内容的方法和接口; BOM：浏览器对象模型，描述与浏览器进行交互的方法和接口
    js主要是用来操作样式的。作用：响应用户操作的。
    onclick:点击事件;alert:调用浏览器的默认弹窗;script标签：解析js代码的。内嵌：放在body标签的结尾前面。
    函数的作用：
    function:函数（里面计算要执行的操作）
    复用: 函数没取名字叫匿名函数：比如：事件调用时; 函数有名字叫有名函数：function fn1(){}; 调用的方式：1.函数名+（）;2.事件调用
    window.onload:当页面加载完成的时候执行里面的代码。
    鼠标移入事件：onmouseover; 鼠标移出事件:onmouseout
    当操作复合样式的时候，去掉-第二个首字母大写。例如:z-index==>zIndex
    数据类型:
        1.字符串(string):由零个或多个字符组成的串。必须使用单引号对或双引号对引起来
        2.数字(Number)  :  为整数或浮点数（小数）;取值范围 +Infinity ~ -Infinity 之间
        3.布尔值(Boolean) : true或false
        4.未定义(Undefined) : undefined,在有变量没赋值的情况下为undefined等等
        5.空(null) : null 在没有元素或者元素获取错误的时候会出现null等等,以上的5种数据类型统称为基本数据类型（也可以叫简单数据类型）
        6.复合（复杂）数据类型：对象
    typeof:计算右边的数据为什么数据类型。typeof 检测后的值都为字符串，并且首字母为小写
    ECMA中的数据类型和typeof的数据类型有点差别
    typeof中的6种数据类型:字符串、数字、布尔值、undefined、object、function
    ECMA中的6种数据类型: 字符串、数字、布尔值、未定义、null、对象。
    Boolean:
    true: true、非0数字为true、非空字符串、对象
    false: undefined、null、false、0、空字符串

    强制类型转换（显示类型转换）主动去转的。通过函数或方法调用，明确的将某种类型转换成另一种类型称为显示转换相反则称为隐式类型转换 。
        parseInt、parseFloat、Number、Boolean...
    隐式类型转换：悄悄地转换。如果一个字符串前面只有一个加号，那么这个字符串会被系统偷偷的转成数字。如果前面为字符串后面为数字，会被系统偷偷的转成字符串。
    字符串 + 数字 = 字符串。+、-、* 、%（取余）

    比较:
    console.log(1 == '1');//在比较的时候，先将两边的值转成同一种数据类型，然后再比较。
    console.log(1 === '1');//不但会比较值还会比较数据类型。性能更高。