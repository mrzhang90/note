image-set根据屏幕分辨率和网速决定使用1倍图还是2倍图
    background-image:url(/1x.png);
    background-image:-webkit-image-set(url(/1x.png) 1x,url(/2x.png) 2x);
a:any-link{color:red}
    上边的那些a没有写到的选择器，都适用于这一条规则
文本默认提示文字样式：
    :-moz-placeholder{color:#21a8e2}
    :-ms-input-placeholder{color:#21a8e2}
    ::-webkit-input-placeholder{color:#21a8e2}
pointer-events:none
    特性是让元素不可点击，具有穿透性。顾名思意，就是鼠标事件拜拜的意思。元素应用了该CSS属性，链接啊，点击啊什么的都变成了“浮云牌酱油”。
touch-acion: 规定用户能否以及如何操作页面上的指定区域; 当手指在屏幕上滑动时(MSPointerMove)连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以触发默认的手势操作：阻止页面滚动
    PS：这是IE11的属性，在IE10应使用-ms-touch-action，IE10之前的浏览器不支持
    auto默认值，允许浏览器给元素添加touch行为;
    none,不允许默认的touch行为;
    pan-x 允许水平轴触摸驱动的平移;
    pan-y 允许垂直轴触摸驱动的平移;
    pinch-zoom 允许拖拽缩放 ;
    manipulation 允许触摸驱动的平移和拖拽缩放;
    double-tap-zoom 允许整个页面双击缩放指定元素;
    inherit 继承父元素的值
-webkit-user-select:用来指定文本的可选择性,需要加各自的前缀,
    参数:none-不允许用户选中文字
        auto——默认值，用户可以选中元素中的内容
        text——用户可以选择元素中的文本
        element——文本可选，但仅限元素的边界内(只有IE和FF支持)
        all——在编辑器内，如果双击或上下文点击发生在子元素上，该值的最高级祖先元素将被选中。
-webkit-text-size-adjust: none;
    允许字体小于12
-webkit-tap-highlight-color: rgba(0,0,0,0);
    点击链接高亮，覆盖颜色
-webkit-appearance: none;
    改变按钮外观
:after，:before{content:".";background:red;}
    给元素的内容的末尾添加东西，并且可以给加进去的东西加样式
    任何一个HTML元素都可以创造3个可以供我们操作的视觉元素，即三个矩形

border-radius-造就万千可能
    圆角(半径|x半径/y半径);x轴是从左往右改变px,y轴是从上往下改变;
    border-top-left-radius,border-top-right-radius,border-bottom-right-radiusborder-bottom-left-radius;border-radius:10px(四个角);border-radius:10px(左上，右下) 30px(右上、左下);border-radius:10px(左上) 30px(右上、左下)  50px(右下);
    border-radius:10px(左上) 30px(右上)  50px(右下) 70px(左下);
    PS: border-radius: 100px / 50px; 中有一个“/” 这个符号是很少出现在css样式中的。因为，圆角有水平方向也有垂直方向，所以"/"前面代表水平方向，后面代表垂直方向。
box-shadow
    阴影;inset (可选参数) x偏移 y偏移 blur模糊半径 扩展半径(可选参数) color 颜色;阴影可以有多层，每层阴影中间以“,”隔开，先写的在上边有写的在下边;PS:扩展的边框阴影不占位置
    box-shadow是可以定义为任意颜色的，并且同一个元素可以投射出不同的box-shadow
渐变:线性渐变
    linear-gradient(90deg, red 0, red 20px, #EEE 20px,#EEE 40px, red 40px, red 60px, #EEE 60px) repeating-linear-gradient(90deg, red 0, red 20px, #EEE 20px,#EEE 40px);
径向渐变:
    背景基点设置-radial-gradient(circle, red 10%, blue 50%);ellipse、circle background-origin: content-box;
    例如:background: -webkit-radial-gradient(left top,100px 80px, red 10%, blue 100%);
       	background: -ms-radial-gradient(left top,100px 80px, red 10%, blue 100%);
       	background: -moz-radial-gradient(left top,farthest-corner, red 10%, blue 100%);
    1.要设置起点，必须需要加前缀,2.火狐的私有设置中，大小只支持关键字,关键字（最近端，最近角，最远端，最远角，包含或覆盖 (closest-side, closest-corner, farthest-side, farthest-corner, contain or cover)）
animation
    应用在页面上已存在的DOM元素上;执行动画时,最后出现的权根是最大的;当动画结束后，样式回到默认效果;我们可以同时附几个animation给一个元素，我们只需要用逗号“，”隔开
    animation:move 2s 1s infinite cubic-bezier(0.825, -0.590, 0.320, 1.495);PS:在关键帧中没有 起始位置 或者 结束位置，默认会以元素的初始位置为准
    共六个属性:
    animation-name//动画属性名,其主要有两个值：IDENT是由Keyframes创建的动画名，none为默认值，当值为none时，将没有任何动画效果。
    animation-duration//动画持续时间,取值:<time>为数值，单位为s （秒.）其默认值为“0”
    animation-timing-function//动画频率,动画的播放方式,六种变换方式:linear匀速;ease逐渐变慢(默认值);ease-in加速;ease-out减速;ease-in-out先加速再减速;animation-delay延迟时间;cubic-bezier(n,n,n,n) 贝塞尔曲线;https://matthewlein.com/ceaser/
    animation-delay//动画延迟时间,取值为<time>为数值，单位为s(秒)，其默认值也是0
    animation-iteration-count//定义循环次数，其可以取值<number>为数字，其默认值为“1”；infinite为无限次数循环
    animation-direction//指定元素动画播放的方向，其只有两个值，默认值为normal，如果设置为normal时，动画的每次循环都是向前播放；另一个值是alternate，他的作用是，动画播放在第偶数次向前播放，第奇数次向反方向播放
    animation-play-state:paused; 控制元素动画的播放状态。其主要有两个值，running和paused其中running为默认值。paused暂停，running重新播放,这个属性目前很少内核支持
    animation-fill-mode:forwards;
        backwards 动画执行之前，位置停留在第一帧;forwards  动画执行之后，位置停留在最后一帧;both 动画执行之前，位置停留在第一帧,动画执行之后，位置停留在最后一帧
transition
    允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。
    特性:在移动端用transform记得加前缀;transform 不脱离文档流;transform 的层级比普通元素高，但是比定位元素低;transform 移走之后，原始位置一样会被保留;transform 不会影响元素的占位大小
    语法:transition: <transition-property> <transition-duration> <transition-timing-function> <transition-delay>,如果实现两个或者多个css属性的transition效果，那么我们只要把几个transition的声明串在一起，用逗号（“，”）隔开
    属性值：执行变换的属性：transition-property变换延续的时间：transition-duration在延续时间段，变换的速率变化,transition-timing-function运动形式,transition-delay延迟时间。
        transition-property:是用来指定当元素其中一个属性改变时执行transition效果，其主要有以下几个值：none(没有属性改变)；all（所有属性改变）这个也是其默认值；indent（某一个属性值）,其对应如下:
            1、color: 通过红、绿、蓝和透明度组件变换（每个数值处理）如：background-color,border-color,color,outline-color等css属性；
            2、length: 真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,padding,outline-width,margin,min-width,min-height,max-width,max-height,line-height,height,border-width,border-spacing,background-position等属性；
            3、percentage:真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,min-width,min-height,max-width,max-height,line-height,height,background-position等属性；
            4、integer离散步骤（整个数字），在真实的数字空间，以及使用floor()转换为整数时发生 如：outline-offset,z-index等属性；
            5、number真实的（浮点型）数值，如：zoom,opacity,font-weight,等属性；
            6、transform list:详情请参阅：《CSS3 Transform》
            7、rectangle:通过x, y, width 和 height（转为数值）变换，如：crop
            8、visibility: 离散步骤，在0到1数字范围之内，0表示“隐藏”，1表示完全“显示”,如：visibility
            9、shadow: 作用于color, x, y 和 blur（模糊）属性,如：text-shadow
            10、gradient: 通过每次停止时的位置和颜色进行变化。它们必须有相同的类型（放射状的或是线性的）和相同的停止数值以便执行动画,如：background-image
            11、paint server (SVG): 只支持下面的情况：从gradient到gradient以及color到color，然后工作与上面类似
            12、space-separated list of above:如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化
            13、a shorthand property: 如果缩写的所有部分都可以实现动画，则会像所有单个属性变化一样变化
        transition-duration:用来指定元素,转换过程的持续时间，取值：<time>为数值，单位为s（秒）或者ms(毫秒),可以作用于所有元素，包括:before和:after伪元素。其默认值是0，也就是变换时是即时的。
        transition-delay延迟时间,其使用和transition-duration极其相似
        transition-timing-function:1、ease：（逐渐变慢）默认值，2、linear：（匀速），3、ease-in：(加速)，4、ease-out：（减速），5、ease-in-out：（加速然后减速），6、cubic-bezier：初始默认值为default,特定的cubic-bezier曲线。 (x1, y1, x2, y2)四个值特定于曲线上点P1和点P2。所有值需在[0, 1]区域内，否则无效。
transform:含义是属性向元素应用 2D 或 3D 转换。字面上就是变形，改变的意思
    示例:transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg);PS:使用多个属性值时，其之间不能用逗号（“，”）分隔，必须使用空格分隔
    属性:旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix。分别还有x、y之分，比如：rotatex() 和 rotatey() ，以此类推。
transform:rotate(<angle>)：通过指定的角度参数对原元素指定一个2D rotation（2D 旋转），
    需先有transform-origin属性的定义,transform-origin定义的是旋转的基点，其中angle是指旋转角度，如果设置的值为正数表示顺时针旋转，如果设置的值为负数，则表示逆时针旋转。
transform:skew(x,y)
    使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）,同样是以元素中心为基点，我们也可以通过transform-origin来改变元素的基点位置。
transform:scale()
    比例；“1.5”表示以1.5的比例放大，如果要放大2倍，须写成“2.0”，缩小则为负“-”。
transform:translate(x,y)
    水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）；translateX(x)仅水平方向移动（X轴移动）；translateY(Y)仅垂直方向移动（Y轴移动）.同样其基点是元素中心点，也可以根据transform-origin改变基点位置
    transform:matrix(<number>, <number>, <number>, <number>, <number>, <number>) ：矩阵,以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。就是基于水平方向（X轴）和垂直方向（Y轴）重新定位元素

兼容写法
    background-size兼容写法：
        /*Mozilla*/ 
        -moz-background-size: auto(原始图片大小) || number(数值) || percentage(百分比) || cover(放大铺满) || contain(缩小铺满) 
        /*Webkit*/ 
        -webkit-background-size: auto(原始图片大小) || number(数值) || percentage(百分比) || cover(放大铺满) || contain(缩小铺满) 
        /*Oprea*/ 
        -o-background-size: auto(原始图片大小) || number(数值) || percentage(百分比) || cover(放大铺满) || contain(缩小铺满) 
        /*W3c标准*/ 
        background-size: auto(原始图片大小) || number(数值) || percentage(百分比) || cover(放大铺满) || contain(缩小铺满)

    background-color兼容写法：
        background: #d8d8d8;
        background: -webkit-gradient(linear, left top, left bottom, from(#fcfcfc), to(#d8d8d8));
        background: -moz-linear-gradient(top,  #fcfcfc,  #d8d8d8);
        filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#fcfcfc', endColorstr='#d8d8d8');

    transform在不同浏览器内核下的书写规则:
        -moz-transform: rotate | scale | skew | translate ;//Mozilla内核浏览器：firefox3.5+
        -webkit-transform: rotate | scale | skew | translate ;//Webkit内核浏览器：Safari and Chrome
        -o-transform: rotate | scale | skew | translate ;//Opera
        -ms-transform: rotate | scale | skew | translate ;//IE9
        transform: rotate | scale | skew | translate ;//W3C标准
    transform-origin:
        -moz-transform-origin: x y;//Mozilla内核浏览器：firefox3.5+
        -webkit-transform-origin: x y;//Webkit内核浏览器：Safari and Chrome
        -o-transform-origin: x y ;//Opera
        -ms-transform-origin: x y;//IE9
        transform-origin: x y ;//W3C标准
    transition:
        -moz-transition ： [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'> [, [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'>]]*
        -webkit-transition ： [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'> [, [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'>]]*
        -o-transition ： [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'> [, [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'>]]*
        transition ： [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'> [, [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'>]]*
    @keyframes 规则
        @keyframes mymove{from {top:0px;}to {top:200px;}}
        @-moz-keyframes mymove /* Firefox */{}
        @-webkit-keyframes mymove /* Safari 和 Chrome */
        @-o-keyframes mymove {}/* Opera */
    animation规则:
        animation: myfirst 5s linear 2s infinite alternate;
        -moz-animation: myfirst 5s linear 2s infinite alternate;/* Firefox: */
        -webkit-animation: myfirst 5s linear 2s infinite alternate;/* Safari 和 Chrome: */
        -o-animation: myfirst 5s linear 2s infinite alternate;/* Opera: */