总结
	代码行数减少
	开发效率变快
	减少第三库的依赖
	面向未来，原生支持
	很多特性面向node.js
	
为何ES Module 如此姗姗来迟 
	文章：https://segmentfault.com/a/1190000004940294

{}结构类型要一致
模块语法
	import
		import {$} form 'jquery.js' //$不能使变量
	export
		export {$} //不能使变量
模块-不一样的理念
	按需引入
		//模块思想
		import {each,…} from 'underscore.js' //es6
		var _=require('underscore.js') //amd
	多点暴露
模块-转码
	浏览器目前不支持ES6模块
	浏览器端识别ES6模块-例如export
		SystemJS
	编译时解析ES6模块，transpiler(转换器)：
		ES6 module transpiler , babel , Traceur(Google)
		webpack

推荐特性
	字符串
		`yang ${abc}`//反引号-字符串插值，相当于'yang'+abc
		
		//反引号还支持 换行 的写法
		`yang
		.
		com`;
		//等同于ES5的
		'yang'+
		'.'+
		'com';

		字符串插值，不能代替前端模板

		Unicode的支持（node.js）
	解构赋值
		var arr=[1,2,3];
		var [first,second]=arr;

		var obj={a:1,b:2};
		var {a,b}=obj;

		function add([x,y]){}
		add([1,2])
	对象
		var a=1;
		var obj={
			a,
			[a+1]:3,//变量来做key
			add(){}//函数可简写
		}
		obj[a+1]=3;
	数组
		var arr1=[1,2,3];
		var arr2=[...arr1];//es6浅拷贝-arr1
		//es5浅拷贝方法
		var arr2=[].concat(arr1);
		var arr2=arr1.slice(0);

		min(...arr2);//数组-函数传值
	函数
		箭头函数
		[1,2,3].map(x => x + 1)//es6
		//等同于
		[1.2.3].map(function(x){
			return x+1
		}.bind(this))//es5-遍历时绑定this,相当于es6的箭头函数

		//默认值
		function(a=1){}
	Class

	Promise
		脚本es6promise


前端模板
	当使用json数据遍历来渲染前端模板时，通常使用字符串拼接来解决，工作量大，此时可以使用前端模板来做

面向对象包括：
	new 构造函数
	共有共享属性/方法
	私有静态属性/方法
	共有特权方法(访问私有成员)
	共有成员
	私有静态成员/方法
	私有成员/方法