编程语言统一化思想

委托

泛型
	随意的类型

反射
	语言动态运行的时候，动态帮你分析这里包里运行的东西，相当于包里插根管子，可以看到包里的东西

集合
	动态数组（ArrayList/Hashtable/SortedList/Stack/Queue）
	这些语言是实现了所有数据结构的高级动态语言

匿名方法

拆箱

多线程

js中语句优先，可以解释成语句的东西，是不会解释成表达式
逗号表达式是连续的表达式，他的结果是最后一个表达式的值

js是弱语言类型，有7中基本数据类型
	前6种属于值类型
	1.Boolean
	2.Number
	3.String
	4.null
		根本就不存在
	5.undefined
		只声明不赋值，变量默认值是undefined
	6.Symbol
	7.Object-对象类型
		1.Array
		2.RegExp
		3.Date
		4.Math
		5.Function
	可以使用typeof判断数据类型，操作符返回一个字符串，但并非所有返回的结果都符合预期
PS:值类型跟对象类型的区别在于，反应到计算机上，存储的地方不同，object存在在栈内存，实际上存储在堆内存

typeof undefined //'undefined'
typeof Symbol() //"symbol"

typeof new Date() //"object"
typeof [] //object
typeof alert //function
typeof null //object
typeof not_defined_var //undefined

变量：
1.var 函数作用域
2.let 块记作用于
3.直接使用 全局作用域
4.const 常量
	const obj['a']=1;
	obj['a']=2;//可以修改
	obj={};//报错

变量提升
	console.log(a);
	var a=1;
	//等同于
	var a;
	console.log(a)
	a=2;

函数
	函数提升：
		函数提升优先级 比 变量提升 更高
	一个函数就是一个可以被外部代码调用(或者函数本身递归调用)的子程序
定义函数
	1.函数声明
	2.函数表达式
	3.Function构造函数
	4.箭头函数
	function fn(){}
	var fn=function(){}
	var fn=new Function(arg1,arg2,...argN,funcBody)
	var fn=(param)=>{}
PS:当做左值用的时候，就是声明；当做右值用的时候，就是表达式

arguments
	1.arguments:一个包含了传递给当前执行函数参数的类似于数组的对象
	2.arguments.length:属性，传递给函数的参数的数目
		优化arguments，得到一个数组
		function aa(...arg){
			console.log(arg)
		}
		aa(1,2,3)

定义对象
	1.字面量-可以理解为一眼就能知道的量
		var obj={'a':1,'b':2}
	2.构造函数
		构造函数和普通函数并没有区别，使用new关键字调用就是构造函数，没有使用new就是普通函数，使用构造函数可以实例化一个对象

	函数的返回值有两种情况：
		1.显示调用return,返回return后表达式的值；
		2.没有调用return,返回undefined
	构造函数返回值：
		1.没有返回值
		2.简单数据类型
		3.对象类型
		PS:前两种情况构造函数返回构造对象的实例，实例化对象正是利用的这个特性；第三种构造函数和普通函数表现一致，返回return后表达式的结果
	prototype
		1.每个函数都有一个prototype的对象属性，对象内有一个constructor属性，默认指向函数本身
		2.每个对象都有一个__proto__的属性，属性指向其父类型的prototype
		PS：理解这两句话，就明白原型链怎么出来的

		什么叫方法、函数
			他们本质上都是function,在当做对象的属性用的时候就叫方法，当它单独拿出来用的时候就叫函数
		function Person(name1){
			this.name2=name1;
		}
		Person.prototype.hi=function(){
			console.log(this.name2);
		}
		var p1=new Person('a1');
		console.log(p1)

this和作用域
	作用域可以通俗的理解:
	1.我是谁
		其中我是谁的回答是this
	2.我有哪些马仔
		马仔就是我的局部变量

this场景
	普通函数
		1.严格模式：undefined
		2.非严格模式：全局对象
			1.node :global
			2.浏览器 ：window
	构造函数
		this指向对象的实例
	对象方法
		this指对象本身

call && apply
	1. fn.call(context,arg1,arg2,...argn)
	2. fn.apply(context,args)
	使用call和apply的作用：
		就一个作用，改变this作用域，就是改变context，把要求的作用域传进去
		console.log(Object.prototype.toString.call(10)==='[object Number]')//借用函数，10借用Object的toString方法
		//10的toString是字符串的10，我想在数字10上调用Object上的toString，可以利用借用函数，借用父级object的tostring,通过call借用，并改变作用域为10	
	Function.prototype.bind
		bind返回一个新函数，函数的作用域为bind参数
		function fn(){
			this.i=0;
			setInterval(function(){
				console.log(this.i++);
			}.bind(this),500)//改变作用域
		}
		fn();
PS:
	call(null)指向window
	call\apply\bind-不同点
		call和apply是通过别的方式，调用这个函数，生成一个新的作用域，告诉了他一个作用域
		bind根据你现在的函数，给你生成一个新的函数，这个新的函数的作用域被我改掉了，老的是不变的
	call\apply\bind-相同点
		都是作用在function原型链上
		都可以改变被调用函数中this指向的对象
	bind绑定this会产生一个新的函数，不会立即执行;call会立即调用

箭头函数
	是ES新特性，是简写的函数表达式，拥有词法作用域和this值
		词法作用域：你明确些了作用域是谁就是谁，没法改了	
		function fn1(){
			this.i=0;
			setInterval(()=>{
				console.log(this.i++)//所以你写了this,那么setInterval没法改this了
			},500)
		}
		fn1()

继承
	在js中，继承有两个目标，子类需要得到父类的：
		1.对象的属性
		2.对象的方法
	
语法
label statement

语句表达式-语句优先
	var x={a:1};
	{a:1}
	{a:1,b:2}

立即执行函数
	首先知道(、~都是表达式，
	小括号的特性要求，里面的东西必须是表达式，这样括号内的函数就是声名，然后()就可以直接调用了
	都是利用表达式强制要求后面的语句必须是表达式，改变语法解析顺序
(function(){console.log(1)}())
[function(){console.log(1)}()]
~function(){console.log(1)}()
!function(){console.log(1)}()
+function(){console.log(1)}()
-function(){console.log(1)}()
delete function(){console.log(1)}()
typeof function(){console.log(1)}()
void function(){console.log(1)}()
var f=function(){console.log(1)}()
1, function(){console.log(1)}();
1^ function(){console.log(2)}();
1 > function(){console.log(3)}();

高阶函数
就是把函数当做参数或者返回值是函数的函数

回调函数

闭包
	含义：函数的嵌套并且对外访问，就会产生闭包
	闭包有两部分组成
	1.函数
	2.环境：函数创建时作用域内的局部变量
	作用：可以保护内部的变量
	闭包可能会造成内存泄露，可以在使用后赋值null解决
	
惰性函数

柯理化

反柯理化






